# Default values for helm-generic-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""
imagePullSecrets:
  - bluestone-registry

replicaCount: 1
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 70

seeder:
  enabled: false
  image:
    repository: sample
    tag: ""
  command: []

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

configMapData: {}
#  APP_NAME: "demo"
#  APP_ENV_NAME: "production"

existingConfigmaps: {}
#  - secret-01

secretData: {}
#  APP_PASSWORD: "YWRtaW4="

existingSecrets: {}
#  - existing-secret-01

command: {}

#Only use this for cronjobs kind deployment
commands: []
  # - name: cron-1
  #   schedule: */15 * * * *
  #   command:
  #     - yarn run cron:test
args: {}

serviceAccount:
  # Specifies whether a service account should be enabled
  enabled: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}


podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 100m
    memory: 200Mi
  requests:
    cpu: 50m
    memory: 100Mi

healthCheck:
  enabled: true
  readinessProbe:
    httpGet:
      path: /system/readiness
      port: 80
    initialDelaySeconds: 0
    timeoutSeconds: 1
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
    exec: {}
      # command:
      #   - todo
  livenessProbe:
    httpGet:
      path: /system/liveness
      port: 80
    initialDelaySeconds: 0
    timeoutSeconds: 1
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

securityContext: {}

services:
  - type: ClusterIP
    annotation: {}
    ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: grpc
      port: 50051
      targetPort: grpc
      protocol: TCP
# NodePort type
# - type: NodePort
#   annotation: {}
#   ports:
#     - name: sample1-service-port
#       protocol: TCP
#       port: 80
#       targetPort: 80
#       nodePort: 32080
#     - name: sample2-service-port
#       protocol: TCP
#       port: 8080
#       targetPort: 8080
#       nodePort: 32081
# LoadBalancer type
# - suffixName: "lb"
#   type: LoadBalancer
#   annotation: {}
#   ports:
#     - name: sample1-service-port
#       protocol: TCP
#       port: 80
#       targetPort: 80
#     - name: sample2-service-port
#       protocol: TCP
#       port: 8080
#       targetPort: 8080

serviceHostNetwork:
  enabled: false
  policy: ClusterFirstWithHostNet

serviceHeadless:
  enabled: false
  # annotation: {}
  # ports:
  #   - name: sample1-service-port
  #     protocol: TCP
  #     port: 80
  #     targetPort: 80
  #   - name: sample2-service-port
  #     protocol: TCP
  #     port: 8080
  #     targetPort: 8080

# Additional volumes on the output Deployment definition.
persistentVolume:
  enabled: false
  accessModes:
    - ReadWriteOnce
  size: 8Gi

nodeSelector: null

# Allow to schedule on spot node
tolerations:
    - key: "node-role.kubernetes.io/worker"
      operator: "Equal"
      value: "worker"
      effect: "NoSchedule"

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-role.kubernetes.io/worker
          operator: In
          values:
            - worker

